# Generated by Django 4.2.11 on 2024-04-21 08:14

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_name', message='Некорректные символы. Используйте только кириллицу, латиницу, пробел.', regex='^[а-яА-Яa-zA-Z\\s]*$'), django.core.validators.MaxLengthValidator(100, message='Длина не должна превышать 100 символов.')], verbose_name='Имя')),
                ('surname', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_surname', message='Некорректные символы. Используйте кириллицу, латиницу, пробел.', regex='^[а-яА-Яa-zA-Z\\s]*$'), django.core.validators.MaxLengthValidator(100, message='Длина не должна превышать 100 символов.')], verbose_name='Отчество')),
                ('family', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_family', message='Некорректные символы. Используйте только кириллицу, латиницу, пробел.', regex='^[а-яА-Яa-zA-Z\\s]*$'), django.core.validators.MaxLengthValidator(100, message='Длина не должна превышать 100 символов.')], verbose_name='Фамилия')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('phone', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_phone', message='Некорректный номер телефона.', regex='^[0-9+]*$'), django.core.validators.MaxLengthValidator(18, message='Длина не должна превышать 18 символов.')], verbose_name='Номер телефона')),
                ('is_boss', models.BooleanField(default=False, null=True, verbose_name='Руководитель')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователя',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
